package com.example.hackathon;


import java.sql.Timestamp;
import java.util.Calendar;
import java.util.List;

import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.hackathon.Merchant;
import com.example.hackathon.MastTran;
import com.example.hackathon.MastTransfer;
import com.example.hackathon.Transaction;
import com.example.hackathon.FindCreate;
import com.example.hackathon.CardMerchLog;
import com.example.hackathon.UserRepository;
import com.example.hackathon.MastTranRepository;
import com.example.hackathon.MastTransferRepository;
import com.example.hackathon.MerchantRepository;
import com.example.hackathon.FindCreateRepository;
import com.example.hackathon.CardMerchLogRepository;
import com.example.hackathon.SparkOperations;
import com.google.gson.Gson;


@Controller    // This means that this class is a Controller
 // This means URL's start with /demo (after Application path)
public class MyController {
	
	Transaction t;
	Merchant m;
	MastTran mt;
	MastTransfer mtran;
	FindCreate findcreate;
	CardMerchLog cardmerchlog;
	Transaction t1;
	TTSWatson tts=new TTSWatson();
	SparkOperations sprk=new SparkOperations();
	String json="";
	String activity="";
	String currTimestamp="";
	
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	
	@Autowired
	private MerchantRepository merchRepository;
	
	@Autowired
	private MastTransferRepository masttransferRepository;
	
	@Autowired
	private MastTranRepository mastertransactionRepository;
	
	@Autowired
	private FindCreateRepository findcreateRepository;
	
	@Autowired
	private CardMerchLogRepository cardmerchlogRepository;
	
	
	@RequestMapping(path="/demo/transactionview",method=RequestMethod.GET)
	public String transactionview() {
	return "transactionview";
}

	
	 @RequestMapping(value="/demo/transactionview")
	 @ResponseBody
	 public String addNewUser(@RequestParam("pan") String pan,@RequestParam("merchid") String merchid,@RequestParam("billamt1") String billamt1,@RequestParam("amtpaid") String amtpaid,Model model) {
		json="";
		Long    pan1=Long.valueOf(pan);
		Long    merid=Long.valueOf(merchid);
		Integer billamt=Integer.valueOf(billamt1);
		Integer billpd=Integer.valueOf(amtpaid);
		Integer pointfetched;
		Integer pointsgiven;
		Integer valuefetched;
		Integer valuegiven;
		Integer valuetobepaid;
		String message="";
		Float merrate;
		Integer wallvalbefore;
		Integer wallvalafter;
		String statreason="";
		
		
		
		try {
			m = merchRepository.findBymerchid(merid);
			Float mrrate=m.getmrate().floatValue();
			merrate=(mrrate/10.0f);
			
		}
		catch(Exception e)
		{
			
			message="Merchant with the entered ID is not associated with Discover network";
			currTimestamp=gettime();
			activity="Transaction was not successful because your merchant id was not part of the loyalty rewards programme for Discover";
			cardmerchlog=new CardMerchLog(merid,activity);
			cardmerchlogRepository.save(cardmerchlog);
			model.addAttribute("message",message);
			tts.playSound(message);
			json=createjson(model);
			return json;
			
		}
		
		
		try {
		      t = userRepository.findBypan(pan1);
		      
		      pointfetched=t.getpoints();
		      valuefetched=t.getvalue();
		      wallvalbefore=valuefetched;
		      
		      if(billamt.intValue()==billpd.intValue())
		      {     
		    	    pointsgiven=(int) (billamt*merrate);
		    	    valuegiven=(Integer)((pointsgiven/10));
		    	    pointfetched=pointfetched + pointsgiven;
			        valuefetched=valuefetched+valuegiven;
			        wallvalafter=valuefetched;
		    	    t.setpoints(pointfetched);
					t.setvalue(valuefetched);
					userRepository.save(t);
					statreason="NA";
					mt=new MastTran(pan1,merid,billamt,billpd,valuegiven,0,wallvalbefore,wallvalafter,"SUCCESSFUL",statreason);
					mastertransactionRepository.save(mt);
		    	    message="Your transaction has been completed successfully and "+ valuegiven + " $ have been credited to your digital wallet";
		    		currTimestamp=gettime();
		    	    activity="Transaction completed successfully.Merchant id:-"+merid+".Transaction amount:-"+billamt+" $.Amount entered:-"+billpd+" $.Value added to wallet:-"+valuegiven+" $.Value before:-"+wallvalbefore+" $.Value after:-"+wallvalafter+ " $.";
		    	    cardmerchlog=new CardMerchLog(pan1,activity);
					cardmerchlogRepository.save(cardmerchlog);
		    	    model.addAttribute("message",message);
		    	    model.addAttribute("message1","alert alert-info");
		      }
		      
		      if(billpd.intValue()<billamt.intValue())
		      {valuetobepaid=billamt-billpd;
		       if(valuefetched.intValue()>=valuetobepaid.intValue())
		       {   
		    	    valuefetched=valuefetched-valuetobepaid;
		    	    pointsgiven=(int)(billamt*merrate);
		    	    valuegiven=(Integer)((pointsgiven/10));
		    	    pointfetched=pointfetched + pointsgiven;
			        valuefetched=valuefetched+valuegiven;
			        wallvalafter=valuefetched;
		    	    t.setpoints(pointfetched);
					t.setvalue(valuefetched);
					userRepository.save(t);
					statreason="NA";
					mt=new MastTran(pan1,merid,billamt,billpd,valuegiven,valuetobepaid,wallvalbefore,wallvalafter,"SUCCESSFUL",statreason);
					mastertransactionRepository.save(mt);
		    	    message="Your transaction has been completed successfully and "+ valuetobepaid +" $ have been deducted from your wallet";
		    	    activity="Transaction completed successfully and  "+valuetobepaid+" $ were deducted from your wallet. The merchant id was:-"+merid+".Transaction amount:-"+billamt+" $.Amount entered:-"+billpd+" $.Value added:-"+valuegiven+" $. Value before:-"+wallvalbefore+" $.Value after :-"+wallvalafter+ " $.";
		    		currTimestamp=gettime();
		    	    cardmerchlog=new CardMerchLog(pan1,activity);
					cardmerchlogRepository.save(cardmerchlog);
		    	    model.addAttribute("message",message);
		    	    model.addAttribute("message1","alert alert-info");
		    	}
		       else
		       {
		    	statreason="Wallet value insufficient by "+ (valuetobepaid-wallvalbefore)+" $";
		    	mt=new MastTran(pan1,merid,billamt,billpd,0,valuetobepaid,wallvalbefore,wallvalbefore,"UNSUCCESSFUL",statreason);
				mastertransactionRepository.save(mt);
		       message= "Your wallet does not have sufficient balance";
		       activity="The transaction attempted was not successful because your wallet did not have sufficient balance by "+(valuetobepaid-wallvalbefore)+" $. The merchant id was:-"+merid+".The transaction amount was:-"+billamt+" $.The amount entered was:-"+billpd+" $.";
		   	   currTimestamp=gettime();
		       cardmerchlog=new CardMerchLog(pan1,activity);
		       cardmerchlogRepository.save(cardmerchlog);
		       model.addAttribute("message",message);
		       model.addAttribute("message1","alert alert-info");
		      }	   
		      }	
		      
		      if(billpd.intValue()>billamt.intValue())
		      {
		    	  statreason="Extra amount entered by " + (billpd-billamt)+ " $";
		    	  mt=new MastTran(pan1,merid,billamt,billpd,0,0,wallvalbefore,wallvalbefore,"UNSUCCESSFUL",statreason);
		    	  mastertransactionRepository.save(mt);
		    	  message="The value filled for the amount to be paid by card, exceeds the transaction amount. Please correct it.";
		    	  currTimestamp=gettime();
		    	  activity="Transaction was not successful because you had entered extra amount. The merchant id was:-"+merid+".The transaction amount was:-"+billamt+" $.The amount entered was:-"+billpd+" $.";
		    	  cardmerchlog=new CardMerchLog(pan1,activity);
				  cardmerchlogRepository.save(cardmerchlog);
		    	  model.addAttribute("message",message);
		      }
		    }
		    catch (Exception e) {
		    	
				message="The card number as entered does not exist";
				currTimestamp=gettime();
				activity="The transaction was not successful because your card was not part of the loyalty rewards programme";
				cardmerchlog=new CardMerchLog(pan1,activity);
				cardmerchlogRepository.save(cardmerchlog);
				model.addAttribute("message",message);
				model.addAttribute("message1","alert alert-info");
		    }
		tts.playSound(message);
		json=createjson(model);
		return json;
		
	}
	
	@RequestMapping(path="/demo/transferview",method=RequestMethod.GET)
	public String transferview() {
	return "transferview";
	}
	
	@RequestMapping(path="/demo/addmerchant",method=RequestMethod.GET)
	public String loadmerchant() {
	return "addmerchant";
	}
	
	 @RequestMapping(value="/demo/transferview")
	 @ResponseBody
	  public String updateUser(@RequestParam("pan1") String pan1,@RequestParam("pan2") String pan2,@RequestParam("amt") String amt,Model model) {
		 	json="";
		    Long pan11=Long.valueOf(pan1);
		    Long pan21=Long.valueOf(pan2);
		 	Integer valuefetched1;
			Integer valuefetched2;
			Integer valuefetched1bef;
			Integer valuefetched2bef;
			Integer valamt=Integer.valueOf(amt);
			String statreason="";
			
		try {
	    	
			t = userRepository.findBypan(pan11);
	    	valuefetched1=t.getvalue();
	    	valuefetched1bef=valuefetched1;
	    }
	    catch (Exception ex) {
	        String message="The card number " + pan1+ " does not exist";
	        model.addAttribute("message",message);
	        activity="Transaction was not successful because your card number " + pan1+ " did not exist while transferring "+valamt+" $ to "+pan2;
	    	currTimestamp=gettime();
	        cardmerchlog=new CardMerchLog(pan11,activity);
			cardmerchlogRepository.save(cardmerchlog);
	        model.addAttribute("message1","alert alert-info");
	        tts.playSound(message);
	        json=createjson(model);
	    	return json;
	    }
        try {
	    	
			t1 = userRepository.findBypan(pan21);
	    	valuefetched2=t1.getvalue();
	    	valuefetched2bef=valuefetched2;
	    }
	    catch (Exception ex) {
	      
	      String message="The card number " + pan2+ " does not exist";
	      activity="Transaction was not successful because the card number " + pan2+ " did not exist while transferring "+valamt+" $ .";
	  	  currTimestamp=gettime();
	      cardmerchlog=new CardMerchLog(pan11,activity);
		  cardmerchlogRepository.save(cardmerchlog);
	      model.addAttribute("message",message);
	      model.addAttribute("message1","alert alert-info");
	      tts.playSound(message);
	      json=createjson(model);
	      return json;
	    }
        if(valamt<valuefetched1)
        {	
        	valuefetched1=valuefetched1-valamt;
        	t.setvalue(valuefetched1);
        	userRepository.save(t);
			valuefetched2=valuefetched2+valamt;
        	t1.setvalue(valuefetched2);
        	userRepository.save(t1);
        	statreason="NA";
        	mtran=new MastTransfer(pan11,pan21,valamt,valuefetched1bef,valuefetched2bef,valuefetched1,valuefetched2,"SUCCESSFUL",statreason);
			masttransferRepository.save(mtran);
			currTimestamp=gettime();
			activity="Amount worth " + amt +" $ was transferred to " +pan21;
			cardmerchlog=new CardMerchLog(pan11,activity);
			cardmerchlogRepository.save(cardmerchlog);
			activity="Amount worth " + amt +" $ was transferred from " +pan11;
			cardmerchlog=new CardMerchLog(pan21,activity);
			cardmerchlogRepository.save(cardmerchlog);
			String message="Your account has been debited by "+ amt + " $" +" and the recipient's account has been credited by " + valamt+" $" ;
			model.addAttribute("message",message);
			model.addAttribute("message1","alert alert-info");
			tts.playSound(message);
			json=createjson(model);
			return json;
        }
	 else
	 {	
		statreason="Wallet value insufficient by " + (valamt-valuefetched1bef)+ " $";
     	mtran=new MastTransfer(pan11,pan21,valamt,valuefetched1bef,valuefetched2bef,valuefetched1bef,valuefetched2bef,"UNSUCCESSFUL",statreason);
		masttransferRepository.save(mtran);
		
		 String message="Your account does not have sufficient balance to transfer this amount. Your current balance is " + valuefetched1 + " $";
		 String message1="Your account did not have sufficient balance to transfer amount worth:-"+valamt+" $. Your current balance then was " + valuefetched1 + " $";
		 currTimestamp=gettime();
		 activity="Transfer attempt worth "+valamt+ "$ was made to "+pan21+ ".However your wallet did not have sufficient balance. Your current balance then was " + valuefetched1 + " $";
		 cardmerchlog=new CardMerchLog(pan11,message1);
		 cardmerchlogRepository.save(cardmerchlog);
		 model.addAttribute("message",message);
		 model.addAttribute("message1","alert alert-info");
		 tts.playSound(message);
		 json=createjson(model);
		 return json;
	 }
        
	 }
	 
	 @RequestMapping(path="/demo/pointsview",method=RequestMethod.GET)
	 public String pointsview() {
	 return "pointsview";
	 }


	 @RequestMapping(value="/demo/pointsview")
	 @ResponseBody
	  public String checkpoints(@RequestParam("ypan") String pan,Model model) {
		json="";
		Long pan1=Long.valueOf(pan);
	    Integer valueinwallet;
	    try {
	      Transaction t = userRepository.findBypan(pan1);
	      valueinwallet = t.getvalue();
	    }
	    catch (Exception ex) {
	      String message="User not found";
	      activity="Your card was not part of the database while enquiring balance";
	  	  currTimestamp=gettime();
		  cardmerchlog=new CardMerchLog(pan1,activity);
		  cardmerchlogRepository.save(cardmerchlog);
	      model.addAttribute("message",message);
	      model.addAttribute("message1","alert alert-info");
	      tts.playSound(message);
	      json=createjson(model);
	      return json;
	    }
	    
	      findcreate=new FindCreate(pan1,"BALANCE INQUIRY",valueinwallet);
		  findcreateRepository.save(findcreate);
		  String message="The total amount in your digtal wallet is : " + valueinwallet+" $";
		  currTimestamp=gettime();
		  activity="The total amount in your digtal wallet was : " + valueinwallet+" $ "+"while enquiring balance";
		  cardmerchlog=new CardMerchLog(pan1,activity);
		  cardmerchlogRepository.save(cardmerchlog);
	      model.addAttribute("message",message);
	      model.addAttribute("message1","alert alert-info");
	      tts.playSound(message);
	      json=createjson(model);
	      return json;
	  }
	 
	 @RequestMapping(value="/demo/cardcheck")
	 @ResponseBody
	  public String pointalert(@RequestParam("ypan") String pan,Model model) {
		json="";
		Long pan1=Long.valueOf(pan);
	    Integer valueinwallet;
	    try {
	      Transaction t = userRepository.findBypan(pan1);
	      valueinwallet = t.getvalue();
	    }
	    catch (Exception ex) {
	      String message="The card number as entered does not exist";
	      model.addAttribute("message",message);
	      model.addAttribute("message1","alert alert-info");
	      json=createjson(model);
	      return json;
	    }
	      String message="The total amount in the cardholder's digital wallet is : " + valueinwallet+" $";
	      model.addAttribute("message",message);
	      model.addAttribute("message1","alert alert-info");
	      json=createjson(model);
	      return json;
	  }
	 
	 @RequestMapping(value="/demo/merchcheck")
	 @ResponseBody
	  public String merchalert(@RequestParam("merchid") String merchid,Model model) {
		json="";
		Long merid=Long.valueOf(merchid);
	    Float mrate;
	    
	    try {
	    	m = merchRepository.findBymerchid(merid);
	    	Float merrate=m.getmrate().floatValue();
			mrate=(merrate/100.0f);
	    }
	    catch (Exception ex) {
	      String message="Merchant with the entered ID is not associated with Discover network";
	      model.addAttribute("message",message);
	      model.addAttribute("message1","alert alert-info");
	      tts.playSound(message);
	      json=createjson(model);
	      return json;
	    }
	      String message="The loyalty and rewards rate of the entered merchant is : " + mrate +" $";
	      model.addAttribute("message",message);
	      model.addAttribute("message1","alert alert-info");
	      json=createjson(model);
	      return json;
	  }
	 
	 @RequestMapping(value="/demo/merchview")
	 @ResponseBody
	  public String merchview(@RequestParam("merchid") String merchid,Model model) {
		json="";
		Long merid=Long.valueOf(merchid);
	    String mername="";
	    Integer merrate=0;
	    try {
	      Merchant m = merchRepository.findBymerchid(merid);
	      mername =m.getmerchname();
	      merrate=m.getmrate();    
	    }
	    catch (Exception ex) {

	    }

	      model.addAttribute("mername",mername);
	      model.addAttribute("merrate",merrate);
	      
	      json=createjson(model);
	      return json;
	  }
	 
	 @RequestMapping(value="/demo/getpeak")
	 @ResponseBody
	 
	  public String merchpeakview(@RequestParam("merchid") String merchid,Model model) {
		json="";
		Long merid=Long.valueOf(merchid);
		
	    List<Row> retval;
	    String message=""; 
	    try {
	      Merchant m = merchRepository.findBymerchid(merid);
	      String mername =m.getmerchname();
	      retval=sprk.viewrecords(merid);
	      String msg1=retval.get(0).mkString();
	      String msg2="";
	      switch(msg1) {
	      case "00":
	    	  msg1="12 A.M";
	    	  msg2="1 A.M.";
	    	  break;
	      case "01":
	    	  msg1="1 A.M";
	    	  msg2="2 A.M.";
	    	  break;
	      case "02":
	    	  msg1="2 A.M";
	    	  msg2="3 A.M.";
	    	  break;
	      case "03":
	    	  msg1="3 A.M";
	    	  msg2="4 A.M.";
	    	  break;
	      case "04":
	    	  msg1="4 A.M";
	    	  msg2="5 A.M.";
	    	  break;
	      case "05":
	    	  msg1="5 A.M";
	    	  msg2="6 A.M.";
	    	  break;
	      case "06":
	    	  msg1="6 A.M";
	    	  msg2="7 A.M.";
	    	  break;
	      case "07":
	    	  msg1="7 A.M";
	    	  msg2="8 A.M.";
	    	  break;
	      case "08":
	    	  msg1="8 A.M";
	    	  msg2="9 A.M.";
	    	  break;
	      case "09":
	    	  msg1="9 A.M";
	    	  msg2="10 A.M.";
	    	  break;
	      case "10":
	    	  msg1="10 A.M";
	    	  msg2="11 A.M.";
	    	  break;
	      case "11":
	    	  msg1="11 A.M";
	    	  msg2="12 P.M.";
	    	  break;
	      case "12":
	    	  msg1="12 P.M";
	    	  msg2="1 P.M.";
	    	  break;
	      case "13":
	    	  msg1="1 P.M";
	    	  msg2="2 P.M.";
	    	  break;
	      case "14":
	    	  msg1="2 P.M";
	    	  msg2="3 P.M.";
	    	  break;
	      case "15":
	    	  msg1="3 P.M";
	    	  msg2="4 P.M.";
	    	  break;
	      case "16":
	    	  msg1="4 P.M";
	    	  msg2="5 P.M.";
	    	  break;
	      case "17":
	    	  msg1="5 P.M";
	    	  msg2="6 P.M.";
	    	  break;
	      case "18":
	    	  msg1="6 P.M";
	    	  msg2="7 P.M.";
	    	  break;
	      case "19":
	    	  msg1="7 P.M";
	    	  msg2="8 P.M.";
	    	  break;
	      case "20":
	    	  msg1="8 P.M";
	    	  msg2="9 P.M.";
	    	  break;
	      case "21":
	    	  msg1="9 P.M";
	    	  msg2="10 P.M.";
	    	  break;
	      case "22":
	    	  msg1="10 P.M";
	    	  msg2="11 P.M.";
	    	  break;
	      case "23":
	    	  msg1="11 P.M";
	    	  msg2="12 A.M.";
	    	  break;
	      }
	     
	      message="The peak hour of transactions for merchant id:-"+merchid+" is between "+msg1+" and "+msg2;
	      
	    }
	    
	    catch (ArrayIndexOutOfBoundsException ex) {
		      ex.printStackTrace();
		      String message1="No transactions have been performed yet, at this merchant.";
		      model.addAttribute("message",message1);
		      json=createjson(model);
		      return json;
		    }
	    
	    catch (Exception ex) {
	      ex.printStackTrace();
	      String message1="No merchant corresponding to the id entered by you is associated with Discover.";
	      model.addAttribute("message",message1);
	      json=createjson(model);
	      return json;
	    }

	      System.out.println(message);
	      model.addAttribute("message",message);
	      
	      json=createjson(model);
	      return json;
	  }
	 
	 @RequestMapping(value="/demo/getmostvalue")
	 @ResponseBody
	  public String getmostamount(@RequestParam("pan") String pan,Model model) {
		json="";
		Long pannum=Long.valueOf(pan);
		
	    List<Row> retval;
	    String message=""; 
	    try {
	      FindCreate f = findcreateRepository.findBypan(pannum);
	      Long pan1=f.getPan();
	      retval=sprk.viewmaxvaluemonth(pannum);
	      String msg1=retval.get(0).mkString();
	      switch(msg1) {
	      case "01":
	    	  msg1="January";
	    	  break;
	      case "02":
	    	  msg1="February";
	    	  break;
	      case "03":
	    	  msg1="March";
	    	  break;
	      case "04":
	    	  msg1="April";
	    	  break;
	      case "05":
	    	  msg1="May";
	    	  break;
	      case "06":
	    	  msg1="June";
	    	  break;
	      case "07":
	    	  msg1="July";
	    	  break;
	      case "08":
	    	  msg1="August";
	    	  break;
	      case "09":
	    	  msg1="September";
	    	  break;
	      case "10":
	    	  msg1="October";
	    	  break;
	      case "11":
	    	  msg1="November";
	    	  break;
	      case "12":
	    	  msg1="December";
	    	  break;
	      }
	     
	      message="The month in which the cardholder with card number:-"+pannum+" gained most value is "+msg1;
	      
	    }
	    catch (ArrayIndexOutOfBoundsException ex) {
		      ex.printStackTrace();
		      String message1="No transactions have been performed yet by this card holder.";
		      model.addAttribute("message",message1);
		      json=createjson(model);
		      return json;
		    }
	    catch (Exception ex) {
	      ex.printStackTrace();
	      String message1="No member corresponding to the card number entered by you is associated with Discover.";
	      model.addAttribute("message",message1);
	      json=createjson(model);
	      return json;
	    }

	      System.out.println(message);
	      model.addAttribute("message",message);
	      
	      json=createjson(model);
	      return json;
	  }
	 
	 @RequestMapping(value="/demo/getcardlist")
	 @ResponseBody
	 
	  public String getcardlist(@RequestParam("month") String month,Model model) {
		json="";
		
		switch(month) {
	      case "January":
	    	  month="01";
	    	  break;
	      case "February":
	    	  month="02";
	    	  break;
	      case "March":
	    	  month="03";
	    	  break;
	      case "April":
	    	  month="04";
	    	  break;
	      case "May":
	    	  month="05";
	    	  break;
	      case "June":
	    	  month="06";
	    	  break;
	      case "July":
	    	  month="07";
	    	  break;
	      case "August":
	    	  month="08";
	    	  break;
	      case "Septemeber":
	    	  month="09";
	    	  break;
	      case "October":
	    	  month="10";
	    	  break;
	      case "November":
	    	  month="11";
	    	  break;
	      case "December":
	    	  month="12";
	    	  break;
	      }
		Integer mnth=Integer.valueOf(month);
	    List<Row> retval1;
	    String message="",message1="";
	    try {
	      retval1=sprk.viewpanlist(mnth);
	      System.out.println(retval1);
	      if(retval1.isEmpty())
	      { message1="There are no cardholders who have accrued more than 100$ but used none of it at the merchant for the specified month.";
	      model.addAttribute("message1",message1);
	      json=createjson(model);
	      return json;
	      }
	      else
	      { 
	    	  message1="There are total "+retval1.size()+" members who have accrued more than 100$ but used none of it at the same merchant for the specified month";
	          model.addAttribute("message1",message1);
	      }
	    }
	    catch (Exception ex) {
	      ex.printStackTrace();
	      message="Something has gone wrong.";
	      model.addAttribute("message",message);
	      json=createjson(model);
	      return json;
	    }
	      model.addAttribute("message",retval1);
	      
	      json=createjson(model);
	      return json;
	  }
	 
	 @RequestMapping(value="/demo/getunsuccessfullist")
	 @ResponseBody
	 
	  public String getunsuccessfullist(@RequestParam("panx") String panx,Model model) {
		json="";
		
		
		Long pan=Long.valueOf(panx);
	    List<Row> retval1;
	    String message="",message1="";
	    try {
	    
	      FindCreate f = findcreateRepository.findBypan(pan);
		  Long pan1=f.getPan();
	      retval1=sprk.viewunsuccessfullist(pan);
	      System.out.println(retval1);
	      if(retval1.isEmpty())
	      { message1="There are no instances where the transfer attempt has been unsucessful for this card holder.";
	      model.addAttribute("message1",message1);
	      json=createjson(model);
	      return json;
	      }
	      else
	      { 
	    	  message1="There are total "+retval1.size()+" instances where the transfer attempt has been unsuccessful for the card holder";
	          model.addAttribute("message1",message1);
	      }
	    }
	    catch (Exception ex) {
	      ex.printStackTrace();
	      message="No member corresponding to the card number entered by you is associated with Discover.";
	      model.addAttribute("message",message);
	      json=createjson(model);
	      return json;
	    }
	      model.addAttribute("message",retval1);
	      
	      json=createjson(model);
	      return json;
	  }
	 
	 @RequestMapping(value="/demo/getmerchloglist")
	 @ResponseBody
	 
	  public String getmerchloglist(@RequestParam("merchidx") String merchidx,Model model) {
		json="";
		
		
		Long merchid=Long.valueOf(merchidx);
	    List<Row> retval1;
	    String message="",message1="";
	    try {
	    
	      Merchant m = merchRepository.findBymerchid(merchid);
		  Long merch=m.getmerchid();
	      retval1=sprk.viewmerchlog(merchid);
	      System.out.println(retval1);
	      if(retval1.isEmpty())
	      { message1="No transactions have yet been performed for this merchant";
	      model.addAttribute("message1",message1);
	      json=createjson(model);
	      return json;
	      }
	      else
	      { 
	    	  message1="There have been total "+retval1.size()+" transactions performed for this merchant";
	          model.addAttribute("message1",message1);
	      }
	    }
	    catch (Exception ex) {
	      ex.printStackTrace();
	      message="No merchant corresponding to the merchant id entered by you is associated with Discover.";
	      model.addAttribute("message",message);
	      json=createjson(model);
	      return json;
	    }
	      model.addAttribute("message",retval1);
	      
	      json=createjson(model);
	      return json;
	  }
	 
	 @RequestMapping(value="/demo/getcardloglist")
	 @ResponseBody
	 
	  public String getcardloglist(@RequestParam("panidx") String panidx,Model model) {
		json="";
		
		
		Long pan=Long.valueOf(panidx);
	    List<Row> retval1;
	    String message="",message1="";
	    try {
	    
	      FindCreate f = findcreateRepository.findBypan(pan);
		  Long panx=f.getPan();
	      retval1=sprk.viewcardlog(pan);
	      System.out.println(retval1);
	      if(retval1.isEmpty())
	      { message1="No activity has yet taken place for this merchant";
	      model.addAttribute("message1",message1);
	      json=createjson(model);
	      return json;
	      }
	      
	      else
	      { 
	    	  message1="There are total "+retval1.size()+" activities associated with this cardholder";
	          model.addAttribute("message1",message1);
	      }
	    }
	    catch (Exception ex) {
	      ex.printStackTrace();
	      message="No card holder corresponding to the card number entered by you is associated with Discover.";
	      model.addAttribute("message",message);
	      json=createjson(model);
	      return json;
	    }
	      model.addAttribute("message",retval1);
	      
	      json=createjson(model);
	      return json;
	  }
	 
	 @RequestMapping(value="/demo/showmerchdata")
	 @ResponseBody
	  public String showmerchdata(@RequestParam("merchid") String merchid,Model model) {
		json="";
		Long merid=Long.valueOf(merchid);
	    String mername="";
	    Integer merrate=0;
	    String message="";
	    try {
	      Merchant m = merchRepository.findBymerchid(merid);
	      mername =m.getmerchname();
	      merrate=m.getmrate();    
	      message="The name of the merchant corresponding to the entered id is :-"+mername+" and the merchant rate is:-"+merrate;
	    }
	    catch (Exception ex) {
	    	message="No merchant corresponding to the id entered by you is associated with Discover.";
	    }

	      model.addAttribute("message",message);
	      
	      json=createjson(model);
	      return json;
	  }
	 
	 
	 @RequestMapping(path="/demo/addpan",method=RequestMethod.GET)
	 public String abc() {
	return "addpan";
	 }
	 
	 
	  @RequestMapping(value="/demo/addpan")
	  @ResponseBody
	  public String addnewpan(@RequestParam("pan") String pan,Model model){  
		  
		  //sprk.viewrecords();
		  String message=" ";
		  json="";
		  Long pan1=Long.valueOf(pan);
		  try {
		      Transaction t = userRepository.findBypan(pan1);
		      t.getpan();
		      message="The card number already exists";
		      activity="Your card already existed and an attempt was made to again insert it in the central database";
		  	  currTimestamp=gettime();
		      cardmerchlog=new CardMerchLog(pan1,activity);
			  cardmerchlogRepository.save(cardmerchlog);
		      model.addAttribute("message",message);
		    }
		  catch(Exception e)
		  {t=new Transaction(pan1,0,0);
		  userRepository.save(t);
		  findcreate=new FindCreate(pan1,"CREATION",0);
		  findcreateRepository.save(findcreate);
		  message="Your card has been successfully added to the loyalty rewards programme";
		  currTimestamp=gettime();
		  activity="Your card was successfully added to the loyalty rewards programme";
		  cardmerchlog=new CardMerchLog(pan1,activity);
		  cardmerchlogRepository.save(cardmerchlog);
		  model.addAttribute("message",message);
		  model.addAttribute("message1","alert alert-info");
		  }
	      tts.playSound(message);
	      json=createjson(model);
	      return json;
	  }
	  
	  @RequestMapping(value="/demo/addmerchant")
	  @ResponseBody
	  public String addnewmerchant(@RequestParam("merchid") String merchid,@RequestParam("merchname") String merchname,@RequestParam("mrate") String mrate,Model model){  
		  String message=" ";
		  json="";
		  Long merid=Long.valueOf(merchid);
		  Integer merchrate=Integer.valueOf(mrate);
		  System.out.println(merchrate);
		  try {
		      m = merchRepository.findBymerchid(merid);
		      m.getmerchid();
		      m.setmerchid(merid);
		      m.setmerchname(merchname);
		      m.setmrate(merchrate);
		      merchRepository.save(m);
		      message="Merchant details have been successfully updated for "+merchname+" and now for every 100$ of transaction, user will get " + merchrate +" $";
		  	  currTimestamp=gettime();
		      activity="Your details were updated and after updation your name was:-"+merchname+" and rate was:-"+merchrate;
		      cardmerchlog=new CardMerchLog(merid,activity);
			  cardmerchlogRepository.save(cardmerchlog);
		      model.addAttribute("message",message);
		    }
		  
		  catch(Exception e)
		  {m=new Merchant(merid,merchname,merchrate);
		  merchRepository.save(m);
		  message="Merchant details for "+merchname+" have been successfully added to the loyalty rewards programme and for every 100$ of transaction, user will get " + merchrate + " $";
		  currTimestamp=gettime();
		  activity="You were made part of the loyalty and rewards programme with name:-"+merchname+" and rate:-"+merchrate;
		  cardmerchlog=new CardMerchLog(merid,activity);
		  cardmerchlogRepository.save(cardmerchlog);
		  model.addAttribute("message",message);
		  model.addAttribute("message1","alert alert-info");
		  }
	      tts.playSound(message);
	      json=createjson(model);
	      return json;
	  }
	  
	  @RequestMapping(path="/demo/transview",method=RequestMethod.GET)
		 public String viewtrans(Model model) {
		  List<Transaction> t3=userRepository.findAll();
		  model.addAttribute("transaction",t3);
		  return "transview";
		 }
	  
	  @RequestMapping(path="/demo/statsview",method=RequestMethod.GET)
		 public String statstrans(Model model) {
		  return "statsview";
		 }
	 
	  
	  public String createjson(Model model) 
	  {
		  try
	      {
	    	  Gson gson = new Gson();
	    	  json = gson.toJson(model);
	      }
	      catch(Exception e)
	      {}
	      return json;
		  
	  }
	  
	  public String gettime()
	  {
		  Calendar calendar = Calendar.getInstance();
		  Timestamp currentTimestamp = new java.sql.Timestamp(calendar.getTime().getTime());
		  String currTimestamp=currentTimestamp.toString();  
		  return currTimestamp;
	  }
}
